# wordpress_bruteforce/modules/waf.py
import re
from aiohttp import ClientSession

WAF_SIGNATURES = {
        "Wordfence": [
            re.compile(r"generated by wordfence", re.I),
            re.compile(r"your access has been blocked", re.I),
            re.compile(r"advanced blocking in effect", re.I)
        ],
        "Cloudflare": [
            re.compile(r"cloudflare ray id", re.I),
            re.compile(r"attention required! \| cloudflare", re.I)
        ],
        "ModSecurity": [
            re.compile(r"mod_security", re.I),
            re.compile(r"not acceptable", re.I)
        ]
    }

class WAFDetector:
    """Advanced WAF detection class"""

    def detect_waf(response_text):
        """Identify WAF from response content"""
        for waf_name, patterns in WAF_SIGNATURES.items():
            if any(pattern.search(response_text) for pattern in patterns):
                return waf_name
        return None

    async def detect(self, url, session):
        """Detect WAF presence with multiple checks"""
        if await self._check_response_headers(url, session):
            return True
        return await self._check_probe_response(url, session)

    async def _check_response_headers(self, url, session):
        """Check for WAF headers in response"""
        async with session.get(url) as response:
            headers = str(response.headers).lower()
            return any(waf in headers for waf in ["cloudflare", "akamai"])

    async def _check_probe_response(self, url, session):
        """Check for WAF patterns in response body"""
        probe_payloads = ["' OR 1=1;--", "<script>alert()</script>"]
        for payload in probe_payloads:
            async with session.post(url, data=payload) as response:
                body = await response.text()
                for name, pattern in self.WAF_SIGNATURES.items():
                    if pattern.search(body):
                        return True
        return False
